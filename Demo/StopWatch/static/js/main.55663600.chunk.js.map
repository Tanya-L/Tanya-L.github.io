{"version":3,"sources":["components/Button.js","components/List.js","components/Result.js","components/Hooks.js","components/CountdownButton.js","components/Countdown.js","components/Stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["getStatus","status","StyledButton","styled","button","disabled","props","children","List","ol","Item","li","Result","laps","bestResult","Math","min","worstResult","max","map","lap","i","isbestResult","isworstResult","key","getLapStatus","toFixed","useStopwatch","useState","setLaps","runTimer","setRunTimer","startTime","setStartTime","setRefresh","useEffect","interval","Date","now","setInterval","x","clearInterval","useTimer","addLap","elapsedTime","prevTotal","length","reduce","acc","curr","currentLap","handleAddLap","resetTimer","startTimer","stopTimer","CountdownButton","ButtonWrap","div","Wrap","Countdown","undefined","timerId","setTimerId","timeLeft","setTimeLeft","startCountdown","time","onClick","Timer","h1","StopWatch","timerMs","hours","floor","minutes","seconds","ret","formatTime","Button","App","Stopwatch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oiBAGA,IAAMA,EAAY,SAAAC,GAChB,OAAQA,GACN,IAAK,UACH,MAAO,MACT,IAAK,UACH,MAAO,QACT,QACE,MAAO,SAIPC,EAAeC,IAAOC,OAAV,KACN,qBAAGC,SAA2B,cAAgB,aAQ1C,gBAAGJ,EAAH,EAAGA,OAAH,OAAgBD,EAAUC,MAC/B,qBAAGA,OAAuB,OAAS,WAE9B,gBAAGA,EAAH,EAAGA,OAAH,0CACiBD,EAAUC,OAC9B,qBAAGI,SAA2B,KAAO,QAGnC,WAAAC,GAAK,OAClB,kBAACJ,EAAD,eAAcD,OAAQK,EAAML,OAAQI,SAAUC,EAAMD,UAAcC,GAC/DA,EAAMC,W,wVC/BJ,IAAMC,EAAOL,IAAOM,GAAV,KAkBJC,EAAOP,IAAOQ,GAAV,KAKN,mBAhBO,SAAAV,GAChB,OAAQA,GACN,IAAK,OACH,MAAO,QACT,IAAK,QACH,MAAO,MACT,QACE,MAAO,YAScD,CAAhB,EAAGC,WCOCW,EA7BA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAAaC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IACzBI,EAAcF,KAAKG,IAAL,MAAAH,KAAI,YAAQF,IAEhC,OACE,kBAACL,EAAD,KACGK,EAAKM,KAAI,SAACC,EAAKC,GACd,IAAMC,EAAeF,IAAQN,EACvBS,EAAgBH,IAAQH,EAU9B,OACE,kBAACP,EAAD,CAAMc,IAAKH,EAAGpB,OAVK,WACnB,IAAIqB,IAAgBC,EACpB,OAAID,EACK,OACEC,EACF,QAEF,KAGeE,IAAtB,UACUJ,EAAI,EACZ,gCAASD,EAAM,KAAMM,QAAQ,GAA7B,W,OCINC,EAAe,WAAO,IAAD,EACDC,mBAAS,IADR,mBAClBf,EADkB,KACZgB,EADY,OA1BV,WAAO,IAAD,EACWD,oBAAS,GADpB,mBACdE,EADc,KACJC,EADI,OAEaH,mBAAS,GAFtB,mBAEdI,EAFc,KAEHC,EAFG,OAGEL,oBAAS,GAAvBM,EAHY,oBAkBrB,OAZAC,qBAAU,WACR,IAAIC,EAKJ,OAJAH,EAAaI,KAAKC,OACdR,IACFM,EAAWG,aAAY,kBAAML,GAAW,SAAAM,GAAC,OAAKA,OAAI,KAE7C,WACLC,cAAcL,GACdH,EAAa,MAEd,CAACH,IAEG,CACLA,WACAC,cACAC,YACAC,gBAMyDS,GAAnDZ,EAFiB,EAEjBA,SAAUC,EAFO,EAEPA,YAAaC,EAFN,EAEMA,UAAWC,EAFjB,EAEiBA,aAkB1C,MAAO,CACLD,UAAWA,EACXnB,OACA8B,OAAQ,kBAXW,WACnB,IAAIC,EAAcP,KAAKC,MAAQN,EACzBa,EACJhC,EAAKiC,OAAS,EAAIjC,EAAKkC,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,GAAK,EAC1DC,EAAarC,EAAKiC,OAAS,EAAIF,EAAcC,EAAYD,EAC/Dd,GAAYD,EAAQ,GAAD,mBAAKhB,GAAL,CAAWqC,KAMhBC,IACdC,WAAY,kBAlBZrB,GAAY,GACZE,EAAa,QACbJ,EAAQ,KAiBRwB,WAAY,kBAAMtB,GAAY,IAC9BuB,UAAW,kBAAMvB,GAAY,IAC7BD,a,iWCnDJ,IAAMyB,EAAkBpD,IAAOC,OAAV,KACT,qBAAGC,SAA2B,cAAgB,aAY7C,qBAAGA,SAA2B,KAAO,QAGnC,WAAAC,GAAK,OAClB,kBAACiD,EAAD,eAAiBtD,OAAQK,EAAML,OAAQI,SAAUC,EAAMD,UAAcC,GAClEA,EAAMC,W,gWCjBX,IAqDMiD,EAAarD,IAAOsD,IAAV,KAMVC,EAAOvD,IAAOsD,IAAV,KAUKE,EArEG,WAAO,IAAD,EACQ/B,wBAASgC,GADjB,mBACfC,EADe,KACNC,EADM,OAEUlC,mBAAS,GAFnB,mBAEfmC,EAFe,KAELC,EAFK,KAgBhBC,EAAiB,SAAAjC,GACrBS,cAAcoB,GAEdC,EACEvB,aAAY,WACVyB,GAAY,SAAAE,GACR,OAAIA,EAAO,GACPzB,cAAcoB,GACP,GAEJK,EAAO,OAEjB,MAELF,EAAYhC,IAGd,OACE,kBAAC0B,EAAD,KACA,0CAAgBK,GACd,kBAACP,EAAD,KACE,kBAAC,EAAD,CAAiBU,KAAK,IAAIC,QAjCR,WACtBF,EAAe,KAiCR,SAEH,kBAAC,EAAD,CAAiBC,KAAK,KAAKC,QAhCR,WACvBF,EAAe,MAgCR,UAEH,kBAAC,EAAD,CAAiBC,KAAK,KAAKC,QA/BR,WACvBF,EAAe,MA+BR,a,qeCkCX,IAAMG,EAAQjE,IAAOkE,GAAV,KAKLX,EAAOvD,IAAOsD,IAAV,KAWJD,EAAarD,IAAOsD,IAAV,KAMDa,EAjGG,WAAO,IAAD,EASlB3C,IAPFd,EAFoB,EAEpBA,KACA8B,EAHoB,EAGpBA,OACAb,EAJoB,EAIpBA,SACAE,EALoB,EAKpBA,UACAqB,EANoB,EAMpBA,WACAC,EAPoB,EAOpBA,UACAF,EARoB,EAQpBA,WAkBF,OACE,kBAAC,EAAD,KACA,0CACE,kBAACgB,EAAD,KA2BN,SAAoBG,GAClB,GAAgB,IAAZA,EACF,MAAO,WAETA,GAAW,IACX,IAAIC,EAAQzD,KAAK0D,MAAMF,EAAU,MACjCA,GAAW,KACX,IAAIG,EAAU3D,KAAK0D,MAAMF,EAAU,IACnCA,GAAW,GACX,IAAII,EAAU5D,KAAK0D,MAAMF,GAErBK,EAAM,GAKV,OAHEA,IAAQJ,EAAQ,GAAK,IAAM,IAAMA,EAC7B,KAAOE,EAAU,GAAK,IAAM,IAAMA,EAClC,KAAOC,EAAU,GAAK,IAAM,IAAMA,EA1C5BE,CAAW/C,EAAWO,KAAKC,MAAQN,EAAY,IACvD,kBAAC,EAAD,KACE,kBAAC8C,EAAD,CACEX,QAlBgB,WACtBrC,EAAWwB,IAAcD,KAkBnBpD,OAAQ6B,EAAW,UAAY,WAE9BA,EAAW,OAAS,SAGvB,kBAACgD,EAAD,CAAQX,QApBI,WACZrC,GAAUa,MAmBmB,eAE7B,kBAACmC,EAAD,CAAQzE,SAAwB,QAAd2B,EAAqBmC,QAlBzB,WAClBf,MAkBO,UAGL,kBAAC,EAAD,KACE,kBAAC,EAAD,OAGA,0DACCvC,EAAKiC,OAAS,GAAK,kBAAC,EAAD,CAAQjC,KAAMA,MCjD3BkE,MAJf,WACE,OAAO,kBAACC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.55663600.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst getStatus = status => {\n  switch (status) {\n    case \"running\":\n      return \"red\";\n    case \"stopped\":\n      return \"green\";\n    default:\n      return \"grey\";\n  }\n};\n\nconst StyledButton = styled.button`\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  border: 0;\n  appearance: none;\n  border-radius: 10%;\n  height: 75px;\n  width: 100px;\n  font-size: 1.5rem;\n  text-align: center;\n  background: ${({ status }) => getStatus(status)};\n  color: ${({ status }) => (status ? \"#fff\" : \"black\")};\n  transition: 0.25s ease;\n  box-shadow: ${({ status }) =>\n    `0 0 0 3px #111, 0 0 0 6px ${getStatus(status)}`};\n  opacity: ${({ disabled }) => (disabled ? \".5\" : null)};\n`;\n\nexport default props => (\n  <StyledButton status={props.status} disabled={props.disabled} {...props}>\n    {props.children}\n  </StyledButton>\n);\n","import styled from \"styled-components\";\n\nexport const List = styled.ol`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-bottom: 10px;\n`;\n\nconst getStatus = status => {\n  switch (status) {\n    case \"best\":\n      return \"green\";\n    case \"worst\":\n      return \"red\";\n    default:\n      return \"darkgray\";\n  }\n};\n\nexport const Item = styled.li`\n  padding: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #ccc;\n  color: ${({ status }) => getStatus(status)}\n`;\n","import React from \"react\";\nimport { List, Item } from \"./List\";\n\nconst Result = ({ laps }) => {\n  const bestResult = Math.min(...laps);\n  const worstResult = Math.max(...laps);\n\n  return (\n    <List>\n      {laps.map((lap, i) => {\n        const isbestResult = lap === bestResult;\n        const isworstResult = lap === worstResult;\n        const getLapStatus = () => {\n          if (isbestResult && isworstResult) return;\n          if (isbestResult) {\n            return \"best\";\n          } else if (isworstResult) {\n            return \"worst\";\n          }\n          return null;\n        };\n        return (\n          <Item key={i} status={getLapStatus()}>\n            Result {i + 1}\n            <span>{+(lap / 1000).toFixed(3)}s</span>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default Result;\n","import { useState, useEffect } from \"react\";\n\nconst useTimer = () => {\n  const [runTimer, setRunTimer] = useState(false);\n  const [startTime, setStartTime] = useState(0);\n  const [, setRefresh] = useState(false);\n\n  // Start button clicked\n  useEffect(() => {\n    let interval;\n    setStartTime(Date.now());\n    if (runTimer) {\n      interval = setInterval(() => setRefresh(x => !x), 25);\n    }\n    return () => {\n      clearInterval(interval);\n      setStartTime(0);\n    }\n  }, [runTimer]);\n\n  return {\n    runTimer,\n    setRunTimer,\n    startTime,\n    setStartTime\n  };\n};\n\nconst useStopwatch = () => {\n  const [laps, setLaps] = useState([]);\n  const { runTimer, setRunTimer, startTime, setStartTime } = useTimer();\n\n  // Reset button clicked\n  const handleReset = () => {\n    setRunTimer(false);\n    setStartTime(0);\n    setLaps([]);\n  };\n\n  // Show Result button clicked, add row with current time\n  const handleAddLap = () => {\n    var elapsedTime = Date.now() - startTime;\n    const prevTotal =\n      laps.length > 0 ? laps.reduce((acc, curr) => acc + curr, 0) : 0;\n    const currentLap = laps.length > 0 ? elapsedTime - prevTotal : elapsedTime;\n    runTimer && setLaps([...laps, currentLap]);\n  };\n\n  return {\n    startTime: startTime,\n    laps,\n    addLap: () => handleAddLap(),\n    resetTimer: () => handleReset(),\n    startTimer: () => setRunTimer(true),\n    stopTimer: () => setRunTimer(false),\n    runTimer\n  };\n};\n\nexport { useTimer, useStopwatch };","import React from \"react\";\nimport styled from \"styled-components\";\n\n\nconst CountdownButton = styled.button`\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  border: 0;\n  appearance: none;\n  border-radius: 10%;\n  height: 75px;\n  width: 100px;\n  font-size: 1.5rem;\n  text-align: center;\n  background: gray;\n  color: black;\n  transition: 0.25s ease;\n  box-shadow: 0 0 0 3px #111, 0 0 0 6px gray;\n  opacity: ${({ disabled }) => (disabled ? \".5\" : null)};\n`;\n\nexport default props => (\n  <CountdownButton status={props.status} disabled={props.disabled} {...props}>\n    {props.children}\n  </CountdownButton>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport CountdownButton from \"./CountdownButton\";\nimport { useState } from \"react\";\n\nconst Countdown = () => {\n  const [timerId, setTimerId] = useState(undefined);\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  const startCountdown5 = () => {\n    startCountdown(5);\n  };\n\n  const startCountdown10 = () => {\n    startCountdown(10);\n  };\n\n  const startCountdown15 = () => {\n    startCountdown(15);\n  };\n\n  const startCountdown = startTime => {\n    clearInterval(timerId);\n\n    setTimerId(\n      setInterval(() => {\n        setTimeLeft(time => {\n            if (time < 1) {\n                clearInterval(timerId);\n                return 0;\n            }\n            return time - 1;\n        });\n      }, 1000)\n    );\n    setTimeLeft(startTime);\n  };\n\n  return (\n    <Wrap>\n    <h1>Time Left: {timeLeft}</h1>\n      <ButtonWrap>\n        <CountdownButton time=\"5\" onClick={startCountdown5}>\n          {\"5 sec\"}\n        </CountdownButton>\n        <CountdownButton time=\"10\" onClick={startCountdown10}>\n          {\"10 sec\"}\n        </CountdownButton>\n        <CountdownButton time=\"15\" onClick={startCountdown15}>\n          {\"15 sec\"}\n        </CountdownButton>\n      </ButtonWrap>\n    </Wrap>\n  );\n};\n\n\n\nconst ButtonWrap = styled.div`\n  margin: 1em 0;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Wrap = styled.div`\n  flex: 1;\n  color: #fff;\n  max-width: 400px;\n  margin: 0 auto;\n  text-align: center;\n  font-family: sans-serif;\n  font-size: 18px;\n`;\n\nexport default Countdown;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport Result from \"./Result\";\nimport { useStopwatch } from \"./Hooks\";\nimport styled from \"styled-components\";\nimport \"../App.css\";\nimport Countdown from \"./Countdown\";\n\nconst StopWatch = () => {\n  const {\n    laps,\n    addLap,\n    runTimer,\n    startTime,\n    startTimer,\n    stopTimer,\n    resetTimer,\n  } = useStopwatch();\n  \n\n  \n\n  const handleStartStop = () => {\n    runTimer ? stopTimer() : startTimer();\n  };\n\n  const handleLap = () => {\n    if (runTimer) addLap();\n  };\n\n  const handleReset = () => {\n    resetTimer();\n  };\n\n  return (\n    <Wrap>\n    <h2>Stop Watch</h2>\n      <Timer>{formatTime(runTimer ? Date.now() - startTime : 0)}</Timer>\n      <ButtonWrap>\n        <Button\n          onClick={handleStartStop}\n          status={runTimer ? \"running\" : \"stopped\"}\n        >\n          {runTimer ? \"Stop\" : \"Start\"}\n        </Button>\n\n        <Button onClick={handleLap}>{\"Show Result\"}</Button>\n\n        <Button disabled={startTime === \"0.0\"} onClick={handleReset}>\n          {\"Reset\"}\n        </Button>\n      </ButtonWrap>\n      <ButtonWrap>\n        <Countdown />\n      </ButtonWrap>\n      \n        <h2>Show result for split time</h2>\n        {laps.length > 0 && <Result laps={laps} />}\n      \n    </Wrap>\n  );\n};\n\n// format time miliseconds\nfunction formatTime(timerMs) {\n  if (timerMs === 0) {\n    return \"00:00:00\";\n  } \n  timerMs /= 1000;\n  let hours = Math.floor(timerMs / 3600);\n  timerMs %= 3600;\n  let minutes = Math.floor(timerMs / 60);\n  timerMs %= 60;\n  let seconds = Math.floor(timerMs);\n\n  var ret = \"\";\n\n    ret += (hours < 10 ? \"0\" : \"\") + hours \n      + \":\" + (minutes < 10 ? \"0\" : \"\") + minutes \n      + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  return ret;\n}\n\nconst Timer = styled.h1`\n  font-size: 4em;\n  font-weight: normal;\n`;\n\nconst Wrap = styled.div`\n  flex: 1;\n  color: #fff;\n  max-width: 400px;\n  margin: 0 auto;\n  text-align: center;\n  padding: 0 2em;\n  font-family: sans-serif;\n  font-size: 22px;\n`;\n\nconst ButtonWrap = styled.div`\n  margin: 1em 0;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport default StopWatch;\n","import React from \"react\";\nimport \"./App.css\";\nimport Stopwatch from \"../src/components/Stopwatch\";\n\nfunction App() {\n  return <Stopwatch />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}