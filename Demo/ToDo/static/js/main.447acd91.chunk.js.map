{"version":3,"sources":["components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","value","done","onChange","e","setUpdateDone","target","id","text","setUpdateText","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","addItem","bind","handleInput","preventDefault","newItem","this","console","log","setState","persist","s","Date","now","filteredItems","filter","onSubmit","placeholder","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.447acd91.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport FlipMove from \"react-flip-move\";\n\nfunction ListItems(props) {\n  const items = props.items;\n  //   console.log(items);\n  const listItems = items.map(item => {\n    return (\n      <div className=\"list\" key={item.key}>\n        <p>\n          <input\n            type=\"checkbox\"\n            value={item.done}\n            onChange={e => {\n              props.setUpdateDone(e.target.value, item.key);\n            }}\n          ></input>\n          <input\n            type=\"text\"\n            id={item.key}\n            value={item.text}\n            onChange={e => {\n              props.setUpdateText(e.target.value, item.key);\n            }}\n          />\n          <span>\n            <FontAwesomeIcon\n              className=\"faicons\"\n              onClick={() => {\n                props.deleteItem(item.key);\n              }}\n              icon=\"trash\"\n            />\n          </span>\n        </p>\n      </div>\n    );\n  });\n  return (\n    <div>\n      <FlipMove duration={300} easing=\"ease-in-out\">\n        {listItems}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default ListItems;\n","import React from \"react\";\nimport \"./App.css\";\nimport ListItems from \"./components/ListItems\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n        done: false\n      }\n    };\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdateText = this.setUpdateText.bind(this);\n    this.setUpdateDone = this.setUpdateDone.bind(this);\n  }\n\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem]; //destructuring Assignment\n      this.setState({\n        items: items,\n        currentItem: {\n          text: \"\",\n          key: \"\"\n        }\n      });\n    }\n  }\n\n  handleInput(e) {\n    e.persist();\n    this.setState(s => {\n      s.currentItem = {\n        text: e.target.value,\n        key: Date.now()\n      };\n      return s;\n    });\n  }\n\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filteredItems\n    });\n  }\n\n  setUpdateText(text, key) {\n    // console.log(\"items:\" + this.state.items);\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        // console.log(item.key + \"    \" + key);\n        item.text = text;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  }\n\n  setUpdateDone(done, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.done = done;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Todo</h1>\n          <form id=\"todo-form\" onSubmit={this.addItem}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter task\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            ></input>\n\n            <button type=\"submit\">Add #{this.state.items.length + 1}</button>\n          </form>\n          <p>{this.state.items.text}</p>\n          <ListItems\n            items={this.state.items}\n            deleteItem={this.deleteItem}\n            setUpdateText={this.setUpdateText}\n            setUpdateDone={this.setUpdateDone}\n          ></ListItems>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}